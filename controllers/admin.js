// Generated by CoffeeScript 1.7.1
var Dealer, EventProxy, Lots, User, config, crypto, defaultDealer, fs, helper, path, str;

fs = require('fs');

path = require('path');

crypto = require('crypto');

helper = require('../lib/helper');

EventProxy = require('eventproxy');

config = require('../config').config;

User = require("../model/mongo").User;

Lots = require("../model/mongo").Lots;

Dealer = require("../model/mongo").Dealer;

str = "qwertyuiopasdfghjklmnbvcxz1234567890";

exports.before = function(req, res, next) {
  return next();
};

exports["in"] = function(req, res, next) {
  return res.render("admin/in");
};

exports.inpost = function(req, res, next) {
  var password, re, type, username;
  re = new helper.recode();
  type = req.body.usertype;
  username = req.body.username;
  password = req.body.password;
  console.log(type, username, password);
  switch (type) {
    case "1":
      console.log("经销商");
      re.recode = 201;
      Dealer.login(username, password, function(err, resutls) {
        console.log(err, resutls);
        if (resutls != null) {
          re.recode = 200;
          res.cookie('user', username);
          res.cookie('usertype', type);
        } else {
          re.recode = 203;
          re.reason = "用户名或密码错误";
        }
        return res.send(re);
      });
      break;
    case "2":
      console.log("客服");
      if (username !== "9999999") {
        re.recode = 203;
        re.reason = "用户名或密码错误";
      }
      break;
    case "3":
      console.log("管理员");
      if (username !== "admin" && password !== "admin888") {
        re.recode = 203;
        re.reason = "用户名或密码错误";
      }
  }
  if (re.recode === 200) {
    res.cookie('user', username);
    res.cookie('usertype', type);
  }
  if (type !== "1") {
    return res.send(re);
  }
};

exports.next = function(req, res, next) {
  console.log(req.cookies.usertype);
  if (req.cookies.usertype === "1") {
    res.redirect("/admin/dealer");
  }
  if (req.cookies.usertype === "2") {
    res.redirect("/admin/serv");
  }
  if (req.cookies.usertype === "3") {
    return res.redirect("/admin/homepage");
  }
};

exports.dealer = function(req, res, next) {
  var endtime, startime, type;
  if (req.cookies.user != null) {
    startime = req.query.startime;
    endtime = req.query.endtime;
    type = req.query.type;
    console.log(startime, endtime, type);
    if ((startime != null) && (endtime != null) && (type != null)) {
      return User.GetUserByTime(req.cookies.user, startime, endtime, type, function(err, resutls) {
        return res.render("admin/dealer", {
          list: resutls
        });
      });
    } else {
      return User.getUserByDealer(req.cookies.user, function(err, resutls) {
        return res.render("admin/dealer", {
          list: resutls
        });
      });
    }
  } else {
    return res.redirect("/admin/in");
  }
};

exports.dealerreser = function(req, res, next) {
  var re;
  console.log(req.params.user_id, req.body.timer);
  re = new helper.recode();
  if ((req.body.timer == null) || req.body.timer === "") {
    return res.send(re);
  } else {
    return User.getUserById(req.params.user_id, function(err, user) {
      user.reser_at = new Date(req.body.timer);
      user.save();
      return res.send(re);
    });
  }
};

exports.dealeractive = function(req, res, next) {
  return res.render("admin/active");
};

exports.dealerinfo = function(req, res, next) {
  console.log(req.query.code);
  return User.getUserByCode(req.query.code, function(err, user) {
    return Lots.getById(user.lot, function(err, lot) {
      return res.render("admin/info", {
        user: user,
        code: req.query.code,
        lot: lot
      });
    });
  });
};

exports.dealerinfopost = function(req, res, next) {
  var code, customer, dealer, mileage, othermobile, othername, re, vin;
  re = new helper.recode();
  othername = req.body.othername;
  othermobile = req.body.othermobile;
  vin = req.body.vin;
  mileage = req.body.mileage;
  customer = req.body.customer;
  dealer = req.body.dealer;
  code = req.body.code;
  console.log(othername, othermobile, vin, mileage, customer);
  if ((customer == null) || customer === "") {
    re.recode = 201;
    re.reason = "客户代表必须填写";
  }
  if ((vin == null) || vin === "" || vin.length !== 6) {
    re.recode = 201;
    re.reason = "VIN码格式不正确";
  }
  if ((othermobile == null) || othermobile === "" || othermobile.length !== 11) {
    re.recode = 201;
    re.reason = "手机号码格式不正确";
  }
  if ((othername == null) || othername === "") {
    re.recode = 201;
    re.reason = "用户名不能为空";
  }
  if (re.recode === 200) {
    return User.updateInfo(code, othername, othermobile, vin, mileage, customer, function(err, resutls) {
      return res.send(re);
    });
  } else {
    return res.send(re);
  }
};

defaultDealer = function() {
  return Dealer["new"]("北京", "北京", "D0101", "pass", "京汉新港", "京汉新港", function(err, resutls) {
    return console.log(err, resutls);
  });
};
